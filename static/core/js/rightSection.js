// Generated by CoffeeScript 1.6.3
(function() {
  var CommentsItem, EditPage, ReplyItem, RightSectionPage, SingleCommentPage, Utils, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Utils = Suzaku.Utils;

  RightSectionPage = (function(_super) {
    var animateRate;

    __extends(RightSectionPage, _super);

    function RightSectionPage() {
      _ref = RightSectionPage.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    animateRate = "normal";

    RightSectionPage.prototype.init = function() {
      return true;
    };

    RightSectionPage.prototype.enterFromRight = function(callback) {
      this.emit("enter");
      this.J.css({
        left: "110%",
        display: "block"
      });
      return this.J.animate({
        left: "0"
      }, animateRate, callback);
    };

    RightSectionPage.prototype.enterFromLeft = function(callback) {
      this.emit("enter");
      this.J.css({
        left: "-110%",
        display: "block"
      });
      return this.J.animate({
        left: "0"
      }, animateRate, callback);
    };

    RightSectionPage.prototype.leaveToLeft = function() {
      var _this = this;
      this.emit("leave");
      this.J.css({
        left: "0"
      });
      return this.J.animate({
        left: "-110%"
      }, animateRate, function() {
        return _this.J.hide();
      });
    };

    RightSectionPage.prototype.leaveToRight = function() {
      var _this = this;
      this.emit("leave");
      this.J.css({
        left: "0"
      });
      return this.J.animate({
        left: "110%"
      }, animateRate, function() {
        return _this.J.hide();
      });
    };

    return RightSectionPage;

  })(Suzaku.Widget);

  EditPage = (function(_super) {
    __extends(EditPage, _super);

    function EditPage() {
      var _this = this;
      EditPage.__super__.constructor.apply(this, arguments);
      this.J.find(".color-btn").on("click", function() {
        return $(this).addClass("active").siblings().removeClass("active");
      });
      this.UI.color1.onclick = function() {
        return _this.emit("useColor", 1);
      };
      this.UI.color2.onclick = function() {
        return _this.emit("useColor", 2);
      };
      this.UI.color3.onclick = function() {
        return _this.emit("useColor", 3);
      };
      this.UI.color4.onclick = function() {
        return _this.emit("useColor", 4);
      };
    }

    EditPage.prototype.init = function(type, inputData) {
      this.J.find('.header-section').hide();
      switch (type) {
        case "newComment":
          this.UI['new-comment-options'].J.show();
          break;
        case "addComment":
          this.UI['add-comment-options'].J.show();
      }
      return CKEDITOR.instances.editPageEditor.setData(inputData);
    };

    return EditPage;

  })(RightSectionPage);

  SingleCommentPage = (function(_super) {
    __extends(SingleCommentPage, _super);

    function SingleCommentPage(target, rightSection) {
      var _this = this;
      this.rightSection = rightSection;
      target.J.html(window.tpls['single-comment-item']);
      SingleCommentPage.__super__.constructor.call(this, target);
      this.replyItems = [];
      this.api = this.rightSection.app.api;
      this.UI.back.onclick = function(evt) {
        evt.stopPropagation();
        return _this.rightSection.goBack();
      };
    }

    SingleCommentPage.prototype.init = function(commentData, commentsItem) {
      var _this = this;
      this.commentData = commentData;
      this.commentsItem = commentsItem;
      this.UI.nickname.J.text(commentData.nickname);
      this.UI.date.J.text(Utils.parseTime(commentData.datetime * 1000, "Y-M-D"));
      this.UI["vote-up-num"].J.text(commentData.praisenum);
      this.UI['vote-up'].onclick = function() {
        return _this.voteUpComment();
      };
      this.UI['vote-down'].onclick = function() {
        return _this.voteDownComment();
      };
      this.UI['vote-down'].onclick = function() {
        return _this.voteDownComment();
      };
      this.UI['reply-btn'].onclick = function() {
        return _this.addReply();
      };
      this.UI.content.J.html(commentData.content);
      console.log(this.commentData);
      this.initReplys();
      return null;
    };

    SingleCommentPage.prototype.initReplys = function(callback) {
      var i, _i, _len, _ref1,
        _this = this;
      _ref1 = this.replyItems;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        i = _ref1[_i];
        i.remove();
      }
      this.replyItems = [];
      this.UI['reply-list'].J.html("<div class='loading-mark'></div>");
      return this.api.getReplys(this.commentData.commentid, function(res) {
        var item, r, tpl, _j, _len1, _ref2;
        _this.UI['reply-list'].J.html("");
        if (!res.success) {
          window.showMessage(res.error_msg, "e");
          return false;
        }
        if (!res.replys) {
          _this.UI['reply-list'].J.html("<p>No replys. click the reply icon to add one.</p>");
          return false;
        }
        _this.UI['replys-num'].J.html("" + res.replys.length + " replys").show();
        tpl = _this.UI['single-reply-li-tpl'].J.html();
        _ref2 = res.replys;
        for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
          r = _ref2[_j];
          item = new ReplyItem(tpl, r);
          item.appendTo(_this.UI['reply-list']);
          item.on("replyToThis", function(replyItems) {
            return _this.addReply(replyItems);
          });
          _this.replyItems.push(item);
        }
        if (callback) {
          return callback();
        }
      });
    };

    SingleCommentPage.prototype.voteUpComment = function() {
      var _this = this;
      return this.api.voteupComment(this.commentData.commentid, function(res) {
        if (!res.success) {
          return console.error(res.error_msg);
        }
        _this.commentData.praisenum = res.praisenum;
        _this.UI['vote-up-num'].J.text(res.praisenum);
        return _this.commentsItem.updateVoteupNum(_this.commentData.commentid, res.praisenum);
      });
    };

    SingleCommentPage.prototype.voteDownComment = function() {
      var _this = this;
      return this.api.votedownComment(this.commentData.commentid, function(res) {
        if (!res.success) {
          return console.error(res.error_msg);
        }
        _this.commentData.praisenum = res.praisenum;
        _this.UI['vote-up-num'].J.text(res.praisenum);
        return _this.commentsItem.updateVoteupNum(_this.commentData.commentid, res.praisenum);
      });
    };

    SingleCommentPage.prototype.addReply = function(target) {
      var _this = this;
      console.log("add reply");
      return this.rightSection.showEditPage("addReply", null, function(content) {
        return _this.api.addReply(_this.commentData.commentid, content, function() {
          window.showMessage("Your reply has been added successfully.");
          return _this.initReplys(function() {
            return _this.commentsItem.updateReplyNum(_this.commentData.commentid, _this.replyItems.length);
          });
        });
      });
    };

    return SingleCommentPage;

  })(RightSectionPage);

  window.RightSection = (function(_super) {
    __extends(RightSection, _super);

    function RightSection(app) {
      RightSection.__super__.constructor.call(this, "#right-section");
      this.app = app;
      this.api = app.api;
      this.commentsItems = [];
      this.rightSectionPages = [];
      this.pageStack = [];
      this.init();
    }

    RightSection.prototype.init = function() {
      var self;
      this.commentPage = new RightSectionPage(this.UI['comment-page']);
      self = this;
      this.editPage = new EditPage(this.UI['edit-page']);
      this.singleCommentPage = new SingleCommentPage(this.UI['single-comment-page'], this);
      this.rightSectionPages = [this.commentPage, this.editPage, this.singleCommentPage];
      this.initComments();
      return this.goInto(this.commentPage);
    };

    RightSection.prototype.initComments = function() {
      var i, item, m, _i, _j, _len, _len1, _ref1, _ref2;
      _ref1 = this.commentsItems;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        i = _ref1[_i];
        i.remove();
      }
      this.commentsItems = [];
      _ref2 = this.app.marks;
      for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
        m = _ref2[_j];
        item = new CommentsItem(this, m.comments, m);
        item.appendTo(this.UI['comments-wrapper']);
        this.commentsItems.push(item);
        this.UI['comments-wrapper'].J.css("padding-bottom", window.screen.height);
      }
      return this;
    };

    RightSection.prototype.scrollToMarkComments = function(markid) {
      var ci, paddingTop, targetTop, _i, _len, _ref1,
        _this = this;
      if (this.currentPage !== this.commentPage) {
        this.goBack();
      }
      paddingTop = 50;
      _ref1 = this.commentsItems;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        ci = _ref1[_i];
        if (ci.markData.markid === markid) {
          ci.J.siblings().removeClass("focus");
          targetTop = ci.dom.offsetTop - paddingTop;
          this.commentPage.J.animate({
            scrollTop: targetTop
          }, "normal", "swing", function() {
            return ci.J.addClass("focus");
          });
          return true;
        }
      }
    };

    RightSection.prototype.resetStack = function() {
      var last;
      this.pageStack = [];
      last = null;
      return this;
    };

    RightSection.prototype.goInto = function(page, callback) {
      var last;
      last = this.pageStack[this.pageStack.length - 1];
      if (last) {
        last.leaveToLeft();
      }
      this.pageStack.push(page);
      page.enterFromRight(callback);
      this.currentPage = page;
      return this;
    };

    RightSection.prototype.goBack = function(callback) {
      var current;
      current = this.pageStack.pop();
      if (!current) {
        console.error("no page to go back");
        return false;
      }
      current.leaveToRight();
      this.currentPage = this.pageStack[this.pageStack.length - 1];
      this.currentPage.enterFromLeft(callback);
      return this;
    };

    RightSection.prototype.showNewCommentHint = function() {
      var contentJ, hintJ,
        _this = this;
      hintJ = this.UI['new-comment-hint'].J;
      contentJ = hintJ.find(".content");
      hintJ.show();
      contentJ.slideDown("fast");
      return this.UI['new-comment-cancel-btn'].onclick = function() {
        _this.hideNewCommentHint();
        return _this.app.newCommentCanceled();
      };
    };

    RightSection.prototype.hideNewCommentHint = function() {
      var contentJ, hintJ;
      hintJ = this.UI['new-comment-hint'].J;
      contentJ = hintJ.find(".content");
      contentJ.slideUp("fast");
      return hintJ.fadeOut("normal");
    };

    RightSection.prototype.showEditPage = function(type, inputData, success, fail) {
      var _this = this;
      this.editPage.init(type, inputData);
      this.UI['edit-accept-btn'].onclick = function() {
        var content;
        content = CKEDITOR.instances.editPageEditor.getData();
        if (!content.replace(" ", "")) {
          return window.showMessage("content is required!", "error");
        }
        if (success) {
          success(content);
        }
        return _this.goBack();
      };
      this.UI['edit-cancel-btn'].onclick = function() {
        if (fail) {
          fail();
        }
        return _this.goBack();
      };
      this.goInto(this.editPage);
      return this.editPage;
    };

    RightSection.prototype.showSingleComment = function(commentData, commentsItem, markData) {
      var _this = this;
      this.singleCommentPage.init(commentData, commentsItem);
      this.singleCommentPage.UI.header.onclick = function(evt) {
        return _this.app.scrollToRectMark(markData);
      };
      return this.goInto(this.singleCommentPage);
    };

    RightSection.prototype.commentsItemActive = function(commentsItem) {
      this.app.scrollToRectMark(commentsItem.markData);
      return commentsItem.J.addClass("focus").siblings().removeClass("focus");
    };

    RightSection.prototype.addComment = function(commentsItem) {
      var markData,
        _this = this;
      markData = commentsItem.markData;
      return this.showEditPage("addComment", null, function(content) {
        var markid;
        markid = markData.markid;
        return _this.api.addCommentToMark(content, markid, function(res) {
          window.showMessage("Comment added successfully.");
          if (!res.success) {
            window.showMessage(res.error_msg, "error");
          }
          return _this.app.initComments(function() {
            return _this.initComments().resetStack().goInto(_this.commentPage, function() {
              _this.scrollToMarkComments(markid);
              return _this.app.scrollToRectMark(markData);
            });
          });
        });
      });
    };

    return RightSection;

  })(Suzaku.Widget);

  CommentsItem = (function(_super) {
    __extends(CommentsItem, _super);

    function CommentsItem(rightSection, comments, markData) {
      var c, first, _i, _len, _ref1,
        _this = this;
      CommentsItem.__super__.constructor.call(this, window.tpls['comments-item']);
      this.rightSection = rightSection;
      this.comments = comments;
      this.markData = markData;
      this.markid = markData.markid;
      this.toggleItems = [];
      this.unfoldBtn = null;
      this.folded = true;
      this.initBtns();
      if (this.comments.length > 3) {
        first = this.addItem(this.comments[0]);
        this.insertUnfoldBtn(first);
        this.addItem(this.comments[this.comments.length - 1]);
        this.UI['fold'].onclick = function(evt) {
          evt.stopPropagation();
          return _this.fold();
        };
      } else {
        _ref1 = this.comments;
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          c = _ref1[_i];
          this.addItem(c);
        }
      }
    }

    CommentsItem.prototype.updateVoteupNum = function(commentid, praisenum) {
      return this.J.find(".id-" + commentid + " .vote-up-num").text(praisenum);
    };

    CommentsItem.prototype.updateReplyNum = function(commentid, replynum) {
      return this.J.find(".id-" + commentid + " .reply-num").text(replynum);
    };

    CommentsItem.prototype.initBtns = function() {
      var _this = this;
      this.dom.onclick = function() {
        return _this.rightSection.commentsItemActive(_this);
      };
      return this.UI['add-comment'].onclick = function(evt) {
        return _this.rightSection.addComment(_this);
      };
    };

    CommentsItem.prototype.fold = function() {
      var i, item, _i, _len, _ref1;
      if (this.folded) {
        return false;
      }
      this.UI['fold'].J.fadeOut("fast");
      this.unfoldBtn.J.fadeIn("fast");
      _ref1 = this.toggleItems;
      for (i = _i = 0, _len = _ref1.length; _i < _len; i = ++_i) {
        item = _ref1[i];
        item.remove();
        this.toggleItems[i] = null;
      }
      this.toggleItems = [];
      return this.folded = true;
    };

    CommentsItem.prototype.unfold = function() {
      var c, i, item, _i, _len, _ref1;
      if (!this.folded) {
        return false;
      }
      this.UI['fold'].J.fadeIn("fast");
      this.unfoldBtn.J.hide();
      _ref1 = this.comments;
      for (i = _i = 0, _len = _ref1.length; _i < _len; i = ++_i) {
        c = _ref1[i];
        if (!(i > 0 && i < (this.comments.length - 1))) {
          continue;
        }
        item = this.addItem(c, true);
        this.toggleItems.push(item);
      }
      return this.folded = false;
    };

    CommentsItem.prototype.addItem = function(data, animate) {
      var item,
        _this = this;
      if (animate == null) {
        animate = false;
      }
      item = new Suzaku.Widget(this.UI['single-comment-li-tpl'].J.html());
      item.data = data;
      item.J.addClass("id-" + data.commentid);
      item.UI.content.J.html(data.content);
      item.UI.nickname.J.text(data.nickname);
      item.UI.date.J.text(Utils.parseTime(data.datetime * 1000, "Y-M-D"));
      item.UI['reply-num'].J.text(data.replynum);
      item.UI['vote-up-num'].J.text(data.praisenum);
      item.dom.onclick = function() {
        return _this.rightSection.showSingleComment(item.data, _this, _this.markData);
      };
      item.appendTo(this.UI.list);
      return item;
    };

    CommentsItem.prototype.insertUnfoldBtn = function(target) {
      var item,
        _this = this;
      item = new Suzaku.Widget(this.UI['unfold-btn-tpl'].J.html());
      item.dom.onclick = function() {
        return _this.unfold();
      };
      item.after(target);
      item.UI['num'].J.text(this.comments.length - 2);
      return this.unfoldBtn = item;
    };

    return CommentsItem;

  })(Suzaku.Widget);

  ReplyItem = (function(_super) {
    __extends(ReplyItem, _super);

    function ReplyItem(tpl, data) {
      var _this = this;
      ReplyItem.__super__.constructor.call(this, tpl);
      console.log(data);
      this.data = data;
      this.UI['reply-nickname'].J.text(data.nickname);
      this.UI['reply-date'].J.text(Utils.parseTime(data.datetime * 1000, "Y-M-D"));
      this.UI['reply-content'].J.html(data.content);
      this.UI['reply-vote-up-num'].J.text(data.praisenum);
      this.UI['reply-reply-btn'].onclick = function() {
        return _this.replyToThisReply();
      };
    }

    ReplyItem.prototype.replyToThisReply = function() {
      console.log("reply to", this);
      return this.emit("replyToThis", this);
    };

    return ReplyItem;

  })(Suzaku.Widget);

}).call(this);
